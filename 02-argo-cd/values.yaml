includeApplications: true

selfRefApp:
  source:
    repository:
      url: https://github.com/mhoyer/k3s-peng
      path: 02-argo-cd
      branch: HEAD

applicationSets:
  workload:
    repository:
      url: https://github.com/mhoyer/k3s-peng
      revision: HEAD
      files:
        - path: 04-demo-apps/*/.gitops.yaml

  platform:
    repository:
      url: https://github.com/mhoyer/k3s-peng
      revision: HEAD
      files:
        - path: 03-platform-apps/*/.gitops.yaml

argocd:
  ## ArgoCD configuration
  ## Based on: https://github.com/argoproj/argo-helm/blob/argo-cd-6.7.17/charts/argo-cd/values.yaml
  ##           https://github.com/argoproj/argo-helm/compare/argo-cd-6.7.17..main#files_bucket
  crds:
    install: true
    keep: false

  fullnameOverride: argo-cd
  global:
    domain: argo-cd.local
    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
    revisionHistoryLimit: 0
    # image:
    #   repository: harbor/argoproj/argocd

  configs:
    cm:
      server.rbac.log.enforce.enable: true
      exec.enabled: false
      admin.enabled: true # !!!!
      users.anonymous.enabled: true
      timeout.reconciliation: 60s # default 180s
    rbac:
      policy.default: role:workload-read
      policy.csv: |
        p, role:workload-read, applications, get, workload/*, allow
        p, role:workload-read, logs, get, workload/*, allow
        p, role:workload-read, applications, sync, workload/*, allow
        g, system:anonymous, role:workload-read

    params:
      server.insecure: true
      # server.basehref: / # see ingress config in server: section
    repositories:
      argo-helm:
        url: ghcr.io/argoproj/argo-helm
        name: argo-helm
        type: helm
        enableOCI: "true"
      external-secrets:
        url: ghcr.io/external-secrets/charts
        name: external-secrets
        type: helm
        enableOCI: "true"
      kyverno:
        url: ghcr.io/kyverno/charts
        name: kyverno
        type: helm
        enableOCI: "true"

  controller:
    replicas: 1
    revisionHistoryLimit: 0
    extraArgs: [ "--kubectl-parallelism-limit", "5" ]
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8082"
    resources:
      requests: { cpu: 500m, memory: 500Mi }
      limits: { memory: 1Gi }
    metrics:
      enabled: true

  dex:
    enabled: false
    resources:
      requests: { cpu: 10m, memory: 64Mi }
      limits: { memory: 64Mi }

  redis:
    # image:
    #   repository: harbor/library/redis
    extraArgs:
      - "--tcp-backlog"
      - "128"
      - "--bind"
      - "0.0.0.0"
      - "--maxmemory"
      - "256mb"
    resources:
      requests: { cpu: 100m, memory: 320Mi }  # see `--maxmemory` option in `extraArgs` (plus 64MB buffer)
      limits: { memory: 320Mi }               # see `--maxmemory` option in `extraArgs` (plus 64MB buffer)

  server:
    replicas: 1
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8083"
    resources:
      requests: { cpu: 100m, memory: 192Mi }
      limits: { memory: 192Mi }
    metrics:
      enabled: true
    ingress:
      enabled: true
      annotations: {}
        # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        # nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        # helm.sh/hook: post-upgrade,post-install
      hostname: "argo-cd.local"
      path: /
      pathType: Prefix
      tls: false

  repoServer:
    replicas: 1
    extraArgs: [ "--parallelismlimit", "5" ]
    resources:
      requests: { cpu: 10m, memory: 256Mi }
      limits: { memory: 1Gi }
    metrics:
      enabled: true

  applicationSet:
    resources:
      requests: { cpu: 10m, memory: 64Mi }
      limits: { memory: 128Mi }

  notifications:
    resources:
      requests: { cpu: 10m, memory: 32Mi }
      limits: { memory: 32Mi }

    ## HACK https://github.com/argoproj/argo-cd/issues/9809#issuecomment-1298785315
    # containerSecurityContext:
    #   seccompProfile: null
